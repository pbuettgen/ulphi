# -*- coding: utf-8 -*-
#
# __COPYRIGHT__
#
# Copyright © 2012-2024 Philipp Büttgenbach
#
# This file is part of ulphi, a CAE tool and library for computing
# electromagnetic fields.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

from SCons.Util import CLVar

from pathlib import Path
from re import compile as re_compile


def AddSvgAndDataDepends(env, doc):
    """Scan for SVG and datafiles.
    """
    includeinkscape = re_compile(r'\\includeinkscape.*?\{([^\}]+)\}')
    addplot_table = re_compile(r"table.*?\{([^\}]+)\}\s*;")
    datafiles = []

    for tex in Path(str(doc[0].dir)).glob("*.tex"):
        with open(tex) as tex_file:
            tex_file_content = tex_file.read()
            for ink_svg in includeinkscape.findall(tex_file_content):
                svg = Path("images").joinpath(ink_svg)
                ink_pdf = env.Inkscape(
                    target=str(svg.with_suffix('.pdf')),
                    source=str(svg.with_suffix(".svg")))
                env.Depends(doc, ink_pdf)
            for x in addplot_table.findall(tex_file_content):
                x_path = str(Path("datasets").joinpath(x))
                if x_path not in datafiles:
                    datafiles.append(x_path)

    env.Depends(doc, datafiles)


Import("ProjectDict")

# = Documents
documents = Environment(
    tools=['inkscape', 'pdflatex', 'pdftex', 'textfile'],
    toolpath=['../../SCons/Tool'],
    PDFLATEX='lualatex',
    MAKEACRONYMSCOM="exit 0",
    MAKEGLOSSARYCOM='cd ${TARGET.dir} && makeglossaries ${SOURCE.filebase}',
    INKSCAPEFLAGS=CLVar('--export-latex -D'))
documents.Append(PDFLATEXFLAGS=CLVar('--shell-restricted'))

# == Configuration
documents.Substfile("include/config.tex.in", SUBST_DICT=ProjectDict)

# == Manual
manual = documents.PDF(source="manual/manual.tex")
documents.Depends(manual, "manual/Notation.tex")
AddSvgAndDataDepends(documents, manual)

# == Poster
poster = documents.PDF(source="poster/poster.tex")
AddSvgAndDataDepends(documents, poster)

# == Presentation
presentation = documents.PDF(source="presentation/presentation.tex")
AddSvgAndDataDepends(documents, presentation)
